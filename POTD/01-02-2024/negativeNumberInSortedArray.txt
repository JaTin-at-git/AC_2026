//https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/description/
//time: best: logn+logm, worst: n(logn+logm)
//space: n


import java.util.Arrays;

public class GfG {

    private static int binarySearch(int arr[]) {
        int l = 0;
        int h = arr.length - 1;

        while (l <= h) {
            int mid = (h + l) / 2;
            if (arr[mid] >= 0) l = mid + 1;
            else h = mid - 1;
        }

        return l;
    }

    private static int binarySearch(int arr[][], int i) {
        int l = 0;
        int h = arr.length - 1;

        while (l <= h) {
            int mid = (h + l) / 2;
            if (arr[mid][i] >= 0) l = mid + 1;
            else h = mid - 1;
        }

        return l;
    }

    public static int countNegatives(int[][] grid) {
        int count = 0;
        int least[] = new int[grid.length];
        Arrays.fill(least, grid.length);


        int i;
        for (i = 0; i < grid.length; i++) {
            if (least[i] < grid.length) break;
//            System.out.println(binarySearch(grid[i]));
            count += grid[0].length - binarySearch(grid[i]);
            int bl = binarySearch(grid, i);
            for (int j = bl; j < grid.length; j++) {
                least[j] = Math.min(i, least[j]);
            }
//            System.out.println(i);
//            System.out.println(Arrays.toString(least));
//            System.out.println(count);
//            System.out.println();
        }

        while (i < grid.length) {
            count += grid[0].length - least[i];
            i++;
        }


        return count;
    }


    public static void main(String[] args) {
        int grid[][] = {{-3}};
        System.out.println(countNegatives(grid));
    }
}