//https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k/description/
//time: O(n)
//space: O(n)


import java.util.HashMap;

public class GfG {
    public static long maximumSubarraySum(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        long max = 0;
        long sum = 0;

        for (int i = 0; i < nums.length; i++) {
            if (i > k - 1) {
                if (map.put(nums[i - k], map.get(nums[i - k]) - 1) == 1)
                    map.remove(nums[i - k]);
                sum -= nums[i - k];
            }
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
            sum += nums[i];
            if (map.size() == k)
                max = Math.max(max, sum);
        }
        return max;
    }

    public static void main(String[] args) {
        int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        System.out.println(maximumSubarraySum(arr, 2));
    }

}