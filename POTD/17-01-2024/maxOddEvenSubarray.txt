//https://leetcode.com/problems/longest-even-odd-subarray-with-threshold/description/
//time: O(n)
//space: O(1)


public class GFG {

    public static int longestAlternatingSubarray(int[] arr, int threshold) {
        int max = 0;
        int count = 0;
        boolean needEven = true;
        for (int i = 0; i < arr.length; i++) {
            if (needEven && arr[i] % 2 == 0 || !needEven && arr[i] % 2 == 1) {
                if (arr[i] <= threshold) {
                    count++;
                    needEven = !needEven;
                } else {
                    count = 0;
                    needEven = true;
                }
            } else if (arr[i] % 2 == 0 && arr[i] <= threshold) {
                count = 1;
            } else {
                count = 0;
                needEven = true;
            }
            max = Math.max(max, count);
        }
        return max;
    }

    public static void main(String[] args) {
        int arr[] = {3,3,3};
        System.out.println(longestAlternatingSubarray(arr, 8));
    }

}