//https://leetcode.com/problems/longest-repeating-character-replacement/description/

import java.util.HashSet;

public class GfG {

    //optimized one
    //time: n
    //space: o(1)
    public static int characterReplacement2(String s, int k) {
        int max = 0;
        int freq[] = new int[26];

        int maxFreq = 0;
        int i = 0;
        for (int j = 0; j < s.length(); j++) {
            int ch = s.charAt(j) - 'A';
            freq[ch] += 1;
            maxFreq = Math.max(maxFreq, freq[ch]);
            while (j - i + 1 - maxFreq > k) {
                freq[s.charAt(i++) - 'A'] -= 1;
            }
            max = Math.max(max, j - i + 1);
        }
        return max;
    }

    //this is what i came up with
    //time: (c+1)n=27n in worst case, where c is number of distinct character in the string
    //space: O(n)
    public static int characterReplacement(String s, int k) {
        HashSet<Character> set = new HashSet<>();
        int max = Integer.MIN_VALUE;
        for (char ch : s.toCharArray()) set.add(ch);
        int temp = k;
        for (char ch : set) {
            k = temp;
            int i = 0;
            char[] arr = s.toCharArray();
            for (int j = 0; j < s.length(); j++) {
                if (arr[j] != ch) k--;
                while (k < 0) if (arr[i++] != ch) k++;
                max = Integer.max(max, j - i + 1);
            }
        }
        return max;
    }


    public static void main(String[] args) {
        System.out.println(characterReplacement2("AABABBA", 1));
    }

}